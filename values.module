<?php
// $Id$

/**
 * @file
 * API for managing reusable value sets.
 */

/**
 * Implementation of hook_perm().
 */
function values_perm() {
  return array(
    'administer values',
  );
}

/**
 * Implementation of hook_menu().
 */
function values_menu() {
  $items = array();
  $items['admin/content/values'] = array(
    'title' => 'Values',
    'page callback' => 'values_list',
    'access arguments' => array('administer values'),
  );
  $items['admin/content/values/list'] = array(
    'title' => 'List',
    'page callback' => 'values_list',
    'access arguments' => array('administer values'),
    'weight' => -10,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/content/values/add'] = array(
    'title' => 'Add',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('values_form', 'add'),
    'access arguments' => array('administer values'),
    'weight' => -9,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/content/values/%values'] = array(
    'title' => 'Values',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('values_form', 'edit', 3),
    'access arguments' => array('administer values'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/content/values/%values/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('values_form', 'edit', 3),
    'access arguments' => array('administer values'),
    'weight' => -9,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/content/values/%values/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('values_delete_confirm', 3),
    'access arguments' => array('administer values'),
    'weight' => -8,
    'type' => MENU_LOCAL_TASK,
  );
  $items['values/js'] = array(
    'title' => 'Javascript Values Form',
    'page callback' => 'values_form_js',
    'access arguments' => array('administer values'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Displays a list of existing value sets.
 */
function values_list() {
  $header = array(
    t('Name'),
    t('Description'),
    '', // edit
    '', // delete
  );
  $rows = array();
  // Get all the configured value sets and create a nice table
  $query = db_query('SELECT * FROM {values_sets}');
  while ($values = db_fetch_object($query)) {
    $rows[] = array(
      $values->id,
      $values->description,
      l(t('edit'), 'admin/content/values/' . $values->id . '/edit'),
      l(t('delete'), 'admin/content/values/' . $values->id . '/delete'),
    );
  }
  return theme_table($header, $rows);
}

/**
 * Form for adding a new value set.
 */
function values_form(&$form_state, $action = 'edit', $values = NULL) {
  $values = values_load($values, TRUE);
  $form = array();
  $form['action'] = array(
    '#type' => 'value',
    '#value' => $action,
  );
  $form['id'] = array(
    '#type' => 'textfield',
    '#title' => t('Value set name'),
    '#description' => t('This is the unique id of the value set. It must contain only alphanumeric characters and underscores; it is used to identify the values internally.'),
    '#default_value' => $values ? $values->id : '',
    '#required' => TRUE,
    '#weight' => -10,
    '#access' => !isset($values->id),
  );
  $form['description'] = array(
    '#type' => 'textfield',
    '#title' => t('Value set description'),
    '#description' => t('This description will appear on the administrative table to tell you what the values are about.'),
    '#default_value' => $values ? $values->description : '',
    '#required' => TRUE,
    '#weight' => -9,
  );
  // Count values
  if (isset($form_state['values_count'])) {
    $values_count = $form_state['values_count'];
  }
  else {
    $values_count = max(2, empty($values->values) ? 2 : count($values->values));
  }
  // Wrapper for values
  $form['values_wrapper'] = array(
    '#tree' => FALSE,
    '#title' => t('Values'),
    '#description' => t('These are the actual values associated with this value set.'),
    '#prefix' => '<div class="clear-block" id="values-value-wrapper">',
    '#suffix' => '</div>',
    '#weight' => -8,
  );
  // Container for value fields
  $form['values_wrapper']['values'] = array(
    '#tree' => TRUE,
    '#prefix' => '<div id="values-values">',
    '#suffix' => '</div>',
    '#theme' => 'values_value_fields',
    '#cache' => TRUE,
  );
  // Add the current values to the form.
  for ($delta = 0; $delta < $values_count; $delta++) {
    $form['values_wrapper']['values'][$delta] = array(
      'value' => array(
        '#type' => 'textfield',
        '#title' => t('Value @n', array('@n' => ($delta + 1))),
        '#default_value' => isset($values->values[$delta]['value']) ? $values->values[$delta]['value'] : '',
        '#size' => 4,
        '#maxlength' => 32,
      ),
      'label' => array(
        '#type' => 'textfield',
        '#title' => t('Label for value @n', array('@n' => ($delta + 1))),
        '#default_value' => isset($values->values[$delta]['label']) ? $values->values[$delta]['label'] : '',
        '#access' => user_access('administer values'),
      ),
      'weight' => array(
        '#type' => 'weight',
        '#delta' => $values_count,
        '#default_value' => isset($values->values[$delta]['weight']) ? $values->values[$delta]['weight'] : 0,
      ),
    );
  }
  // AHAH-enabled "Add more" button
  $form['values_wrapper']['values_add_more'] = array(
    '#type' => 'submit',
    '#value' => t('Add more'),
    '#description' => t("If the amount of options above isn't enough, click here to add more."),
    '#weight' => 1,
    '#submit' => array('values_add_more_submit'), // If no javascript action.
    '#ahah' => array(
      'path' => 'values/js',
      'wrapper' => 'values-values',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 10,
  );
  return $form;
}

/**
 * Submit handler to add more values to a value set. This handler is used when
 * javascript is not available. It makes changes to the form state and the
 * entire form is rebuilt during the page reload.
 */
function values_add_more_submit($form, &$form_state) {
  // Make the changes we want to the form state.
  if ($form_state['values']['values_add_more']) {
    $n = $_GET['q'] == 'values/js' ? 1 : 5;
    $form_state['values_count'] = count($form_state['values']['values']) + $n;
  }
}

/**
 * Menu callback for AHAH additions.
 */
function values_form_js() {
  $form_state = array('storage' => NULL, 'submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];
  // Get the form from the cache.
  $form = form_get_cache($form_build_id, $form_state);
  $args = $form['#parameters'];
  $form_id = array_shift($args);
  // We will run some of the submit handlers so we need to disable redirecting.
  $form['#redirect'] = FALSE;
  // We need to process the form, prepare for that by setting a few internals
  // variables.
  $form['#post'] = $_POST;
  $form['#programmed'] = FALSE;
  $form_state['post'] = $_POST;
  // Build, validate and if possible, submit the form.
  drupal_process_form($form_id, $form, $form_state);
  // This call recreates the form relying solely on the form_state that the
  // drupal_process_form set up.
  $form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);
  // Render the new output.
  $values_form = $form['values_wrapper']['values'];
  // Prevent duplicate wrappers.
  unset($values_form['#prefix'], $values_form['#suffix']);
  $output = theme('status_messages') . drupal_render($values_form);
  drupal_json(array('status' => TRUE, 'data' => $output));
}

/**
 * Validates the values form.
 */
function values_form_validate(&$form, &$form_state) {
  $id = $form_state['values']['id'];
  // Value set id must be alphanumeric or underscores, no other punctuation
  if (preg_match('/[^a-zA-Z0-9_]/', $id)) {
    form_set_error('id', t('Value set name must be alphanumeric or underscores only.'));
  }
  // Value set id must be unique
  if ($form_state['values']['action'] == 'add') {
    $values = values_load($id);
    if ($values) {
      form_set_error('id', t('You must use a unique name for this value set.'));
    }
  }
}

/**
 * Submits the values form.
 */
function values_form_submit(&$form, &$form_state) {
  $values = new stdClass;
  $values->id = $form_state['values']['id'];
  $values->description = $form_state['values']['description'];
  $values->values = array();
  foreach ($form_state['values']['values'] as $value) {
    $values->values[] = array(
      'value' => $value['value'],
      'label' => $value['label'],
      'weight' => $value['weight'],
    );
  }
  values_save($values);
  $form_state['redirect'] = 'admin/content/values';
}

/**
 * Loads values object from the database.
 */
function values_load($id, $reset = FALSE) {
  static $values_sets;
  if (is_object($id)) {
    $id = $id->id;
  }
  if (!$reset && !empty($values_sets[$id])) {
    return $values_sets[$id];
  }
  $values = db_fetch_object(db_query("SELECT * FROM {values_sets} WHERE id = '%s'", $id));
  if (!empty($values)) {
    $values->values = array();
    $query = db_query("SELECT * FROM {values_values} WHERE id = '%s' ORDER BY weight ASC", $values->id);
    while ($value = db_fetch_object($query)) {
      $values->values[] = array(
        'value' => $value->value,
        'label' => $value->label,
        'weight' => $value->weight,
      );
    }
    $values_sets[$id] = $values;
    return $values_sets[$id];
  }
  return FALSE;
}

/**
 * Loads all value sets.
 */
function values_load_all() {
  $values_sets = array();
  $query = db_query('SELECT id FROM {values_sets} ORDER BY description ASC');
  while ($values = db_fetch_object($query)) {
    $values_sets[] = values_load($values->id);
  }
  return $values_sets;
}

/**
 * Saves a values object to the database.
 */
function values_save($values) {
  // Delete existing values
  values_delete($values->id);
  // Create a new value set object
  $set = new stdClass;
  $set->id = $values->id;
  $set->description = $values->description;
  if ($success = drupal_write_record('values_sets', $set)) {
    // Create new key-label pairs
    foreach ($values->values as $option) {
      if (strlen($option['value'])) {
        $value = array(
          'id' => $values->id,
          'value' => $option['value'],
          'label' => $option['label'],
          'weight' => $option['weight'],
        );
        drupal_write_record('values_values', $value);
      }
    }
    drupal_set_message(t('Value set !id was saved.', array('!id' => $values->id)));
  }
}

/**
 * Confirmation form to delete a value object from the database.
 */
function values_delete_confirm(&$form_state, $values) {
  $form['id'] = array(
    '#type' => 'value', 
    '#value' => $values->id,
  );
  return confirm_form($form, 
    t('Are you sure you want to delete follow-up !id?', array('!id' => $values->id)), 
    'admin/content/values',
    t('This action cannot be undone.'), 
    t('Delete'), 
    t('Cancel')
  );
}

/**
 * Calls deletion of a value object.
 */
function values_delete_confirm_submit(&$form, &$form_state) {
  values_delete($form_state['values']['id']);
  drupal_set_message(t('Value set !id was deleted.', array('!id' => $form_state['values']['id'])));
}

/**
 * Deletes a value object from the database.
 */
function values_delete($id) {
  if (is_object($id)) {
    $id = $id->id;
  }
  db_query("DELETE FROM {values_values} WHERE id = '%s'", $id);
  db_query("DELETE FROM {values_sets} WHERE id = '%s'", $id);
}

/**
 * Implementation of hook_theme().
 */
function values_theme() {
  return array(
    'values_value_fields' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}

/**
 * Theme the admin values form.
 *
 * @ingroup themeable
 */
function theme_values_value_fields($form) {
  // Define table headers
  $headers = array(
    t('Key'),
    t('Label'),
    t('Weight'),
  );
  // Build table rows
  $rows = array();
  foreach (element_children($form) as $key) {
    // No need to print the field title every time
    unset($form[$key]['value']['#title'], $form[$key]['label']['#title']);
    $row = array();
    $row[] = drupal_render($form[$key]['value']);
    $row[] = drupal_render($form[$key]['label']);
    $form[$key]['weight']['#attributes']['class'] = 'values-weight-group';
    $row[] = drupal_render($form[$key]['weight']);
    $rows[] = array('data' => $row, 'class' => 'draggable');
  }
  drupal_add_css(drupal_get_path('module', 'values') . '/values.css');
  drupal_add_tabledrag('values-value-list', 'order', 'sibling', 'values-weight-group');
  return theme('table', $headers, $rows, array('id' => 'values-value-list')) . drupal_render($form);
}
